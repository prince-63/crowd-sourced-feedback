generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  isBlocked Boolean   @default(false)
  products  Product[] @relation("UserProducts")
  comments  Comment[] @relation("UserComments")
  votes     Vote[]    @relation("UserVotes")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  link        String?
  creator     User      @relation("UserProducts", fields: [creatorId], references: [id])
  creatorId   String    @db.ObjectId
  comments    Comment[] @relation("ProductComments")
  votes       Vote[]    @relation("ProductVotes")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  isPinned  Boolean  @default(false)
  product   Product  @relation("ProductComments", fields: [productId], references: [id])
  productId String   @db.ObjectId
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  product   Product  @relation("ProductVotes", fields: [productId], references: [id])
  productId String   @db.ObjectId
  user      User     @relation("UserVotes", fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([productId, userId])
}

enum Role {
  USER
  ADMIN
}
